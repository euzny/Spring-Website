/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-06-23 03:02:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://dapi.kakao.com/v2/maps/sdk.js?appkey=681e977067d98d095ccfda23ca7c463c\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write(" 	#header {\r\n");
      out.write("	   width:100%;\r\n");
      out.write("	   height:60px;\r\n");
      out.write("	   padding: 20px;\r\n");
      out.write("	   background-color:#929292;\r\n");
      out.write("	   border-bottom: 1px solid white; \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#header h3{\r\n");
      out.write("	   font-size: 25px;\r\n");
      out.write("	   font-weight: bold;\r\n");
      out.write("	   text-align: left;\r\n");
      out.write("	   color: white;\r\n");
      out.write("	}\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"header\">\r\n");
      out.write("  	<h3>약통위치경로</h3>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"webmap\" style=\"width:80%; height:600px; margin:50px auto 5px auto;\" ></div>    \r\n");
      out.write("<div style=\"width:90%; text-align:right; font-size:11px;\">*해당 경로는 현재 기준 3일전까지만 확인 가능합니다.</div>\r\n");
      out.write(" \r\n");
      out.write("<script>\r\n");
      out.write("var json = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("var first_positions = [];\r\n");
      out.write("var textday ,texttime;\r\n");
      out.write("for (var i=0; i<json.length; i++){\r\n");
      out.write("	textday = json[i].gps_date.substr(0,10);\r\n");
      out.write("	texttime = json[i].gps_date.substr(11,18);\r\n");
      out.write("	\r\n");
      out.write("	first_positions[i] = {\r\n");
      out.write("			content: '<div id=\"title\">'+textday+'<br/>'+texttime+'</div>',\r\n");
      out.write("			latlng: new kakao.maps.LatLng(json[i].latitude, json[i].longitude)\r\n");
      out.write("	};\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('webmap'), // 지도를 표시할 div\r\n");
      out.write(" \r\n");
      out.write("mapOption = {\r\n");
      out.write("\r\n");
      out.write("center: first_positions[0].latlng, // 지도의 중심좌표 */\r\n");
      out.write("level: 1// 지도의 확대 레벨\r\n");
      out.write(" \r\n");
      out.write("};\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var mapTypeControl = new kakao.maps.MapTypeControl(); // 지도에 컨트롤을 추가해야 지도위에 표시\r\n");
      out.write("// kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n");
      out.write("map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT); // 지도 확대 축소를 제어할 수 있는 줌 컨트롤을 생성\r\n");
      out.write("var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\r\n");
      out.write("// 첫번째 마커 생성\r\n");
      out.write(" \r\n");
      out.write("for (var i = 0; i < first_positions.length; i ++) {\r\n");
      out.write(" \r\n");
      out.write("// 마커를 생성합니다\r\n");
      out.write(" \r\n");
      out.write("var marker = new kakao.maps.Marker({\r\n");
      out.write(" \r\n");
      out.write("map: map, // 마커를 표시할 지도\r\n");
      out.write(" \r\n");
      out.write("position: first_positions[i].latlng // 마커의 위치// 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n");
      out.write(" \r\n");
      out.write("});\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("// 마커에 표시할 인포윈도우를 생성합니다\r\n");
      out.write(" \r\n");
      out.write("var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write(" \r\n");
      out.write("content: first_positions[i].content, // 인포윈도우에 표시할 내용\r\n");
      out.write(" \r\n");
      out.write("removable : true\r\n");
      out.write(" \r\n");
      out.write("});\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("kakao.maps.event.addListener(marker, 'click', marker_click(map, marker, infowindow));\r\n");
      out.write(" \r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("function marker_click(map, marker, infowindow){\r\n");
      out.write(" \r\n");
      out.write("return function() {\r\n");
      out.write(" \r\n");
      out.write("infowindow.open(map, marker);\r\n");
      out.write(" \r\n");
      out.write("};\r\n");
      out.write(" \r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write("// 선을 구성하는 좌표 배열입니다. 이 좌표들을 이어서 선을 표시합니다\r\n");
      out.write("\r\n");
      out.write("var first_polyline = new Array();\r\n");
      out.write("\r\n");
      out.write("for (var i = 0; i < json.length; i ++) {\r\n");
      out.write("	\r\n");
      out.write("	first_polyline[i] = new kakao.maps.LatLng(json[i].latitude ,json[i].longitude);\r\n");
      out.write("}  \r\n");
      out.write(" \r\n");
      out.write("// 지도에 표시할 선을 생성합니다\r\n");
      out.write(" \r\n");
      out.write("var first_linePath = new kakao.maps.Polyline({\r\n");
      out.write(" \r\n");
      out.write("path: first_polyline, // 선을 구성하는 좌표배열 입니다\r\n");
      out.write(" \r\n");
      out.write("strokeWeight: 10, // 선의 두께 입니다\r\n");
      out.write(" \r\n");
      out.write("strokeColor: '#FFAE00', // 선의 색깔입니다\r\n");
      out.write(" \r\n");
      out.write("strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다\r\n");
      out.write(" \r\n");
      out.write("strokeStyle: 'solid' // 선의 스타일입니다\r\n");
      out.write(" \r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("// 지도에 선을 표시합니다\r\n");
      out.write(" \r\n");
      out.write("first_linePath.setMap(map);\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
