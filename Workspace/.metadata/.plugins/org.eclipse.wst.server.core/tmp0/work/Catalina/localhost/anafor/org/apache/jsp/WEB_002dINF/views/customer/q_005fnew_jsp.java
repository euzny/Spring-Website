/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-06-14 00:59:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.customer;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class q_005fnew_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("input {\n");
      out.write("	height: 22px;\n");
      out.write("	padding: 3px 5px;\n");
      out.write("	font-size: 15px;\n");
      out.write("}\n");
      out.write(" \n");
      out.write("textarea {\n");
      out.write("	font-size: 15px; padding:3px 5px;  height: 250px; resize: none;\n");
      out.write("}\n");
      out.write("input[name=title], textarea[name=content] { width: calc(100% - 24px) }\n");
      out.write("input[type=file], #delete-file { display: none; }\n");
      out.write("\n");
      out.write("\n");
      out.write(".btnSet { margin-top: 20px; }\n");
      out.write("a.btn-fill, a.btn-empty {\n");
      out.write("	text-align: center;\n");
      out.write("	padding: 3px 10px;\n");
      out.write("	border: 1px solid #696aad;\n");
      out.write("	border-radius: 1px;\n");
      out.write("	box-shadow: 1px 1px 2px;\n");
      out.write("	       오른쪽, 아래쪽, 번짐 정도\n");
      out.write("}\n");
      out.write("a.btn-fill {\n");
      out.write("	background: #696aad;\n");
      out.write("	color: #fff;	\n");
      out.write("}\n");
      out.write("a.btn-empty {\n");
      out.write("	background: #fff;\n");
      out.write("	color: #696aad;\n");
      out.write("}\n");
      out.write("a.btn-fill-s {\n");
      out.write("	font-size: 13px; font-weight: bold;\n");
      out.write("	padding: 1px 10px;\n");
      out.write("	border: 1px solid #c4dafc;\n");
      out.write("	border-radius: 3px;\n");
      out.write("	box-shadow: 2px 2px 2px #022d72;\n");
      out.write("	background : #b1cdfa;\n");
      out.write("	color: #0000cd;	\n");
      out.write("}\n");
      out.write("table{margin-top:30px;}\n");
      out.write("p{font-size:30px; margin-top:100px; font-weight: bold;}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<p>Q&A 작성</p>\n");
      out.write("<!-- 파일을 첨부하여 submit()할 경우\n");
      out.write("	1. method는 post로 지정\n");
      out.write("	2. form에 반드시 enctype='multipart/form-data'지정 -->\n");
      out.write("	\n");
      out.write("<form action=\"insert.cu\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("	<div id=\"content\">\n");
      out.write("		<table>\n");
      out.write("			<tr>\n");
      out.write("				<th class='w-px120'>제목</th>\n");
      out.write("				<td>\n");
      out.write("					<input type=\"text\" name=\"title\" title=\"제목\" class=\"chk\"/>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th>내용</th>\n");
      out.write("				<td>\n");
      out.write("					<textarea name=\"content\" title=\"내용\" class=\"chk\"></textarea>\n");
      out.write("					<!-- textarea는 />닫으면안됨 -->\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("			<th>첨부파일</th>\n");
      out.write("				<td class=\"left\"> \n");
      out.write("					<label> \n");
      out.write("						<a><img src='imgs/select.png' class=\"file-img\" /></a> \n");
      out.write("						<input type=\"file\" name=\"file\" id=\"attach-file\"/> \n");
      out.write("					</label> \n");
      out.write("					<span id=\"file-name\"></span>\n");
      out.write("					<!-- 이미지 파일인 경우 미리보기 적용 -->\n");
      out.write("					<span id=\"preview\"></span>\n");
      out.write("					<a id='delete-file'><i class=\"fa-solid fa-circle-minus\"></i></a>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("		<div class='btnSet'>\n");
      out.write("			<a class='btn-fill' onclick=\"if( emptyCheck() ){ $('form').submit()}\">저장하기</a>\n");
      out.write("			<a class='btn-empty' href=\"list.cu\">취소</a>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</form>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
